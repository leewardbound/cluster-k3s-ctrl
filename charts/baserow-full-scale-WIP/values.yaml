# -- Server replicas
replicas: 1
# -- Custom priority class for different treatment by the scheduler
priorityClassName:

image:
  repository: baserow/backend
  tag: 1.9.1
  pullPolicy: IfNotPresent
  pullSecrets: []

worker:
  # -- worker replicas
  replicas: 1
  # -- Custom priority class for different treatment by the scheduler
  priorityClassName:

frontend:
  replicas: 1
  priorityClassName:
  image:
    repository: baserow/web-frontend
    tag: 1.9.1
    pullPolicy: IfNotPresent
    pullSecrets: []
  service:
    # -- Service that is created to access baserow
    enabled: true
    type: ClusterIP
    port: 80
    name: http
    protocol: TCP
    labels: {}
    annotations: {}

ingress:
  enabled: false
  ingressClassName: ""
  annotations: {}
  labels: {}
  hostname: baserow.domain.tld
  tls:
    - hosts: []
      secretName: ""

baserow:
  # -- Log level for server and worker
  log_level: info
  # -- Secret key used for cookie singing and unique user IDs,
  # don't change this after the first install
  secret_key: ""
  email:
    # -- SMTP Server emails are sent from, fully optional
    host: ""
    port: 587
    # -- SMTP credentials, when left empty, not authentication will be done
    username: ""
    # -- SMTP credentials, when left empty, not authentication will be done
    password: ""
    # -- Enable either use_tls or use_ssl, they can't be enabled at the same time.
    use_tls: false
    # -- Enable either use_tls or use_ssl, they can't be enabled at the same time.
    use_ssl: false
    # -- Connection timeout
    timeout: 30
    # -- Email from address, can either be in the format "foo@bar.baz" or "authentik <foo@bar.baz>"
    from: ""
  postgresql:
    # -- set the postgresql hostname to talk to
    # if unset and .Values.postgresql.enabled == true, will generate the default
    # @default -- `{{ .Release.Name }}-postgresql`
    host: '{{ .Release.Name }}-postgresql'
    # -- postgresql Database name
    # @default -- `authentik`
    name: "baserow"
    # -- postgresql Username
    # @default -- `authentik`
    user: "baserow"
    password: ""
    port: 5432
    s3_backup:
      # -- optional S3 backup, access key
      access_key: ""
      # -- optional S3 backup, secret key
      secret_key: ""
      # -- optional S3 backup, bucket
      bucket: ""
      # -- optional S3 backup, region
      region: ""
      # -- optional S3 backup, host, including protocol (https://minio.domain.tld)
      host: ""
      # -- optional S3 backup, location in the bucket
      # @default -- `"/"`
      location: ""
      # -- optional S3 backup, set to `true` to disable SSL certificate verification
      insecure_skip_verify: false
  redis:
    # -- set the redis hostname to talk to
    # @default -- `{{ .Release.Name }}-redis-master`
    host: '{{ .Release.Name }}-redis-master'
    password: ""

# -- see configuration options at https://baserow.io/docs/installation%2Fconfiguration
env:
  PRIVATE_BACKEND_URL: http://baserow

envFrom: []
#  - configMapRef:
#      name: special-config

envValueFrom: {}
#  BASEROW_VAR_NAME:
#    secretKeyRef:
#      key: password
#      name: my-secret

service:
  # -- Service that is created to access baserow
  enabled: true
  type: ClusterIP
  port: 80
  name: http
  protocol: TCP
  labels: {}
  annotations: {}

volumes: []

volumeMounts: []

# -- affinity applied to the deployments
affinity: {}

# -- nodeSelector applied to the deployments
nodeSelector: {}

resources:
  server: {}
  worker: {}

# WARNING: liveness and readiness probes are disabled, i am having some trouble with the /health/ endpoint
livenessProbe:
  # -- enables or disables the livenessProbe
  enabled: false
  httpGet:
    # -- liveness probe url path
    path: /_health/
    port: http
  initialDelaySeconds: 50
  periodSeconds: 10

readinessProbe:
  enabled: false
  httpGet:
    path: /_health/
    port: http
  initialDelaySeconds: 50
  periodSeconds: 10

serviceAccount:
  # -- Service account is needed for managed outposts
  create: true

prometheus:
  serviceMonitor:
    create: false
    interval: 30s
    scrapeTimeout: 3s
  rules:
    create: false

postgresql:
  # -- enable the bundled bitnami postgresql chart
  enabled: false
  postgresqlUsername: "baserow"
  # postgresqlPassword: ""
  postgresqlDatabase: "baserow"
  persistence:
    enabled: true
  #   storageClass:
  #   accessModes:
  #     - ReadWriteOnce

redis:
  # -- enable the bundled bitnami redis chart
  enabled: false
  architecture: standalone
  auth:
    enabled: false
  master:
    disableCommands: []
  replica:
    disableCommands: []
